'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.42.
'
Namespace WSLists
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ListsSoap", [Namespace]:="http://schemas.microsoft.com/sharepoint/soap/")>  _
    Partial Public Class Lists
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListAndViewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddListFromFeatureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListCollectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListItemChangesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListItemChangesSinceTokenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateListItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddDiscussionBoardItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetVersionCollectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddAttachmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAttachmentCollectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteAttachmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckOutFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UndoCheckOutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckInFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListContentTypesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListContentTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateContentTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateContentTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteContentTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateContentTypeXmlDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateContentTypesXmlDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteContentTypeXmlDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ApplyContentTypeToListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.BriefingVB.MySettings.Default.BriefingVB_WSLists_Lists
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetListCompleted As GetListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListAndViewCompleted As GetListAndViewCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteListCompleted As DeleteListCompletedEventHandler
        
        '''<remarks/>
        Public Event AddListCompleted As AddListCompletedEventHandler
        
        '''<remarks/>
        Public Event AddListFromFeatureCompleted As AddListFromFeatureCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateListCompleted As UpdateListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListCollectionCompleted As GetListCollectionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListItemsCompleted As GetListItemsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListItemChangesCompleted As GetListItemChangesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListItemChangesSinceTokenCompleted As GetListItemChangesSinceTokenCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateListItemsCompleted As UpdateListItemsCompletedEventHandler
        
        '''<remarks/>
        Public Event AddDiscussionBoardItemCompleted As AddDiscussionBoardItemCompletedEventHandler
        
        '''<remarks/>
        Public Event GetVersionCollectionCompleted As GetVersionCollectionCompletedEventHandler
        
        '''<remarks/>
        Public Event AddAttachmentCompleted As AddAttachmentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAttachmentCollectionCompleted As GetAttachmentCollectionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteAttachmentCompleted As DeleteAttachmentCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckOutFileCompleted As CheckOutFileCompletedEventHandler
        
        '''<remarks/>
        Public Event UndoCheckOutCompleted As UndoCheckOutCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckInFileCompleted As CheckInFileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListContentTypesCompleted As GetListContentTypesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListContentTypeCompleted As GetListContentTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateContentTypeCompleted As CreateContentTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateContentTypeCompleted As UpdateContentTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteContentTypeCompleted As DeleteContentTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateContentTypeXmlDocumentCompleted As UpdateContentTypeXmlDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateContentTypesXmlDocumentCompleted As UpdateContentTypesXmlDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteContentTypeXmlDocumentCompleted As DeleteContentTypeXmlDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event ApplyContentTypeToListCompleted As ApplyContentTypeToListCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/GetList", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetList(ByVal listName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetList", New Object() {listName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListAsync(ByVal listName As String)
            Me.GetListAsync(listName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListAsync(ByVal listName As String, ByVal userState As Object)
            If (Me.GetListOperationCompleted Is Nothing) Then
                Me.GetListOperationCompleted = AddressOf Me.OnGetListOperationCompleted
            End If
            Me.InvokeAsync("GetList", New Object() {listName}, Me.GetListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListCompleted(Me, New GetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/GetListAndView", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListAndView(ByVal listName As String, ByVal viewName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetListAndView", New Object() {listName, viewName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListAndViewAsync(ByVal listName As String, ByVal viewName As String)
            Me.GetListAndViewAsync(listName, viewName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListAndViewAsync(ByVal listName As String, ByVal viewName As String, ByVal userState As Object)
            If (Me.GetListAndViewOperationCompleted Is Nothing) Then
                Me.GetListAndViewOperationCompleted = AddressOf Me.OnGetListAndViewOperationCompleted
            End If
            Me.InvokeAsync("GetListAndView", New Object() {listName, viewName}, Me.GetListAndViewOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListAndViewOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListAndViewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListAndViewCompleted(Me, New GetListAndViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/DeleteList", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteList(ByVal listName As String)
            Me.Invoke("DeleteList", New Object() {listName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteListAsync(ByVal listName As String)
            Me.DeleteListAsync(listName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteListAsync(ByVal listName As String, ByVal userState As Object)
            If (Me.DeleteListOperationCompleted Is Nothing) Then
                Me.DeleteListOperationCompleted = AddressOf Me.OnDeleteListOperationCompleted
            End If
            Me.InvokeAsync("DeleteList", New Object() {listName}, Me.DeleteListOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteListOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteListCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/AddList", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddList(ByVal listName As String, ByVal description As String, ByVal templateID As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AddList", New Object() {listName, description, templateID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddListAsync(ByVal listName As String, ByVal description As String, ByVal templateID As Integer)
            Me.AddListAsync(listName, description, templateID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddListAsync(ByVal listName As String, ByVal description As String, ByVal templateID As Integer, ByVal userState As Object)
            If (Me.AddListOperationCompleted Is Nothing) Then
                Me.AddListOperationCompleted = AddressOf Me.OnAddListOperationCompleted
            End If
            Me.InvokeAsync("AddList", New Object() {listName, description, templateID}, Me.AddListOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddListOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddListCompleted(Me, New AddListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/AddListFromFeature", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddListFromFeature(ByVal listName As String, ByVal description As String, ByVal featureID As System.Guid, ByVal templateID As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AddListFromFeature", New Object() {listName, description, featureID, templateID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddListFromFeatureAsync(ByVal listName As String, ByVal description As String, ByVal featureID As System.Guid, ByVal templateID As Integer)
            Me.AddListFromFeatureAsync(listName, description, featureID, templateID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddListFromFeatureAsync(ByVal listName As String, ByVal description As String, ByVal featureID As System.Guid, ByVal templateID As Integer, ByVal userState As Object)
            If (Me.AddListFromFeatureOperationCompleted Is Nothing) Then
                Me.AddListFromFeatureOperationCompleted = AddressOf Me.OnAddListFromFeatureOperationCompleted
            End If
            Me.InvokeAsync("AddListFromFeature", New Object() {listName, description, featureID, templateID}, Me.AddListFromFeatureOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddListFromFeatureOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddListFromFeatureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddListFromFeatureCompleted(Me, New AddListFromFeatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/UpdateList", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateList(ByVal listName As String, ByVal listProperties As System.Xml.XmlNode, ByVal newFields As System.Xml.XmlNode, ByVal updateFields As System.Xml.XmlNode, ByVal deleteFields As System.Xml.XmlNode, ByVal listVersion As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateList", New Object() {listName, listProperties, newFields, updateFields, deleteFields, listVersion})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateListAsync(ByVal listName As String, ByVal listProperties As System.Xml.XmlNode, ByVal newFields As System.Xml.XmlNode, ByVal updateFields As System.Xml.XmlNode, ByVal deleteFields As System.Xml.XmlNode, ByVal listVersion As String)
            Me.UpdateListAsync(listName, listProperties, newFields, updateFields, deleteFields, listVersion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateListAsync(ByVal listName As String, ByVal listProperties As System.Xml.XmlNode, ByVal newFields As System.Xml.XmlNode, ByVal updateFields As System.Xml.XmlNode, ByVal deleteFields As System.Xml.XmlNode, ByVal listVersion As String, ByVal userState As Object)
            If (Me.UpdateListOperationCompleted Is Nothing) Then
                Me.UpdateListOperationCompleted = AddressOf Me.OnUpdateListOperationCompleted
            End If
            Me.InvokeAsync("UpdateList", New Object() {listName, listProperties, newFields, updateFields, deleteFields, listVersion}, Me.UpdateListOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateListOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateListCompleted(Me, New UpdateListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/GetListCollection", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListCollection() As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetListCollection", New Object(-1) {})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListCollectionAsync()
            Me.GetListCollectionAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListCollectionAsync(ByVal userState As Object)
            If (Me.GetListCollectionOperationCompleted Is Nothing) Then
                Me.GetListCollectionOperationCompleted = AddressOf Me.OnGetListCollectionOperationCompleted
            End If
            Me.InvokeAsync("GetListCollection", New Object(-1) {}, Me.GetListCollectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListCollectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListCollectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListCollectionCompleted(Me, New GetListCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/GetListItems", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListItems(ByVal listName As String, ByVal viewName As String, ByVal query As System.Xml.XmlNode, ByVal viewFields As System.Xml.XmlNode, ByVal rowLimit As String, ByVal queryOptions As System.Xml.XmlNode, ByVal webID As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetListItems", New Object() {listName, viewName, query, viewFields, rowLimit, queryOptions, webID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListItemsAsync(ByVal listName As String, ByVal viewName As String, ByVal query As System.Xml.XmlNode, ByVal viewFields As System.Xml.XmlNode, ByVal rowLimit As String, ByVal queryOptions As System.Xml.XmlNode, ByVal webID As String)
            Me.GetListItemsAsync(listName, viewName, query, viewFields, rowLimit, queryOptions, webID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListItemsAsync(ByVal listName As String, ByVal viewName As String, ByVal query As System.Xml.XmlNode, ByVal viewFields As System.Xml.XmlNode, ByVal rowLimit As String, ByVal queryOptions As System.Xml.XmlNode, ByVal webID As String, ByVal userState As Object)
            If (Me.GetListItemsOperationCompleted Is Nothing) Then
                Me.GetListItemsOperationCompleted = AddressOf Me.OnGetListItemsOperationCompleted
            End If
            Me.InvokeAsync("GetListItems", New Object() {listName, viewName, query, viewFields, rowLimit, queryOptions, webID}, Me.GetListItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListItemsCompleted(Me, New GetListItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/GetListItemChanges", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListItemChanges(ByVal listName As String, ByVal viewFields As System.Xml.XmlNode, ByVal since As String, ByVal contains As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetListItemChanges", New Object() {listName, viewFields, since, contains})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListItemChangesAsync(ByVal listName As String, ByVal viewFields As System.Xml.XmlNode, ByVal since As String, ByVal contains As System.Xml.XmlNode)
            Me.GetListItemChangesAsync(listName, viewFields, since, contains, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListItemChangesAsync(ByVal listName As String, ByVal viewFields As System.Xml.XmlNode, ByVal since As String, ByVal contains As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.GetListItemChangesOperationCompleted Is Nothing) Then
                Me.GetListItemChangesOperationCompleted = AddressOf Me.OnGetListItemChangesOperationCompleted
            End If
            Me.InvokeAsync("GetListItemChanges", New Object() {listName, viewFields, since, contains}, Me.GetListItemChangesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListItemChangesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListItemChangesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListItemChangesCompleted(Me, New GetListItemChangesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/GetListItemChangesSinceToken", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListItemChangesSinceToken(ByVal listName As String, ByVal viewName As String, ByVal query As System.Xml.XmlNode, ByVal viewFields As System.Xml.XmlNode, ByVal rowLimit As String, ByVal queryOptions As System.Xml.XmlNode, ByVal changeToken As String, ByVal contains As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetListItemChangesSinceToken", New Object() {listName, viewName, query, viewFields, rowLimit, queryOptions, changeToken, contains})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListItemChangesSinceTokenAsync(ByVal listName As String, ByVal viewName As String, ByVal query As System.Xml.XmlNode, ByVal viewFields As System.Xml.XmlNode, ByVal rowLimit As String, ByVal queryOptions As System.Xml.XmlNode, ByVal changeToken As String, ByVal contains As System.Xml.XmlNode)
            Me.GetListItemChangesSinceTokenAsync(listName, viewName, query, viewFields, rowLimit, queryOptions, changeToken, contains, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListItemChangesSinceTokenAsync(ByVal listName As String, ByVal viewName As String, ByVal query As System.Xml.XmlNode, ByVal viewFields As System.Xml.XmlNode, ByVal rowLimit As String, ByVal queryOptions As System.Xml.XmlNode, ByVal changeToken As String, ByVal contains As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.GetListItemChangesSinceTokenOperationCompleted Is Nothing) Then
                Me.GetListItemChangesSinceTokenOperationCompleted = AddressOf Me.OnGetListItemChangesSinceTokenOperationCompleted
            End If
            Me.InvokeAsync("GetListItemChangesSinceToken", New Object() {listName, viewName, query, viewFields, rowLimit, queryOptions, changeToken, contains}, Me.GetListItemChangesSinceTokenOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListItemChangesSinceTokenOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListItemChangesSinceTokenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListItemChangesSinceTokenCompleted(Me, New GetListItemChangesSinceTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/UpdateListItems", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateListItems(ByVal listName As String, ByVal updates As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateListItems", New Object() {listName, updates})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateListItemsAsync(ByVal listName As String, ByVal updates As System.Xml.XmlNode)
            Me.UpdateListItemsAsync(listName, updates, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateListItemsAsync(ByVal listName As String, ByVal updates As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.UpdateListItemsOperationCompleted Is Nothing) Then
                Me.UpdateListItemsOperationCompleted = AddressOf Me.OnUpdateListItemsOperationCompleted
            End If
            Me.InvokeAsync("UpdateListItems", New Object() {listName, updates}, Me.UpdateListItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateListItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateListItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateListItemsCompleted(Me, New UpdateListItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/AddDiscussionBoardItem", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddDiscussionBoardItem(ByVal listName As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal message() As Byte) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AddDiscussionBoardItem", New Object() {listName, message})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddDiscussionBoardItemAsync(ByVal listName As String, ByVal message() As Byte)
            Me.AddDiscussionBoardItemAsync(listName, message, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddDiscussionBoardItemAsync(ByVal listName As String, ByVal message() As Byte, ByVal userState As Object)
            If (Me.AddDiscussionBoardItemOperationCompleted Is Nothing) Then
                Me.AddDiscussionBoardItemOperationCompleted = AddressOf Me.OnAddDiscussionBoardItemOperationCompleted
            End If
            Me.InvokeAsync("AddDiscussionBoardItem", New Object() {listName, message}, Me.AddDiscussionBoardItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddDiscussionBoardItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddDiscussionBoardItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddDiscussionBoardItemCompleted(Me, New AddDiscussionBoardItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/GetVersionCollection", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetVersionCollection(ByVal strlistID As String, ByVal strlistItemID As String, ByVal strFieldName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetVersionCollection", New Object() {strlistID, strlistItemID, strFieldName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetVersionCollectionAsync(ByVal strlistID As String, ByVal strlistItemID As String, ByVal strFieldName As String)
            Me.GetVersionCollectionAsync(strlistID, strlistItemID, strFieldName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetVersionCollectionAsync(ByVal strlistID As String, ByVal strlistItemID As String, ByVal strFieldName As String, ByVal userState As Object)
            If (Me.GetVersionCollectionOperationCompleted Is Nothing) Then
                Me.GetVersionCollectionOperationCompleted = AddressOf Me.OnGetVersionCollectionOperationCompleted
            End If
            Me.InvokeAsync("GetVersionCollection", New Object() {strlistID, strlistItemID, strFieldName}, Me.GetVersionCollectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetVersionCollectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetVersionCollectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetVersionCollectionCompleted(Me, New GetVersionCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/AddAttachment", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddAttachment(ByVal listName As String, ByVal listItemID As String, ByVal fileName As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal attachment() As Byte) As String
            Dim results() As Object = Me.Invoke("AddAttachment", New Object() {listName, listItemID, fileName, attachment})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddAttachmentAsync(ByVal listName As String, ByVal listItemID As String, ByVal fileName As String, ByVal attachment() As Byte)
            Me.AddAttachmentAsync(listName, listItemID, fileName, attachment, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddAttachmentAsync(ByVal listName As String, ByVal listItemID As String, ByVal fileName As String, ByVal attachment() As Byte, ByVal userState As Object)
            If (Me.AddAttachmentOperationCompleted Is Nothing) Then
                Me.AddAttachmentOperationCompleted = AddressOf Me.OnAddAttachmentOperationCompleted
            End If
            Me.InvokeAsync("AddAttachment", New Object() {listName, listItemID, fileName, attachment}, Me.AddAttachmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddAttachmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddAttachmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddAttachmentCompleted(Me, New AddAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/GetAttachmentCollection", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAttachmentCollection(ByVal listName As String, ByVal listItemID As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetAttachmentCollection", New Object() {listName, listItemID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAttachmentCollectionAsync(ByVal listName As String, ByVal listItemID As String)
            Me.GetAttachmentCollectionAsync(listName, listItemID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAttachmentCollectionAsync(ByVal listName As String, ByVal listItemID As String, ByVal userState As Object)
            If (Me.GetAttachmentCollectionOperationCompleted Is Nothing) Then
                Me.GetAttachmentCollectionOperationCompleted = AddressOf Me.OnGetAttachmentCollectionOperationCompleted
            End If
            Me.InvokeAsync("GetAttachmentCollection", New Object() {listName, listItemID}, Me.GetAttachmentCollectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAttachmentCollectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAttachmentCollectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAttachmentCollectionCompleted(Me, New GetAttachmentCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/DeleteAttachment", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteAttachment(ByVal listName As String, ByVal listItemID As String, ByVal url As String)
            Me.Invoke("DeleteAttachment", New Object() {listName, listItemID, url})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteAttachmentAsync(ByVal listName As String, ByVal listItemID As String, ByVal url As String)
            Me.DeleteAttachmentAsync(listName, listItemID, url, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteAttachmentAsync(ByVal listName As String, ByVal listItemID As String, ByVal url As String, ByVal userState As Object)
            If (Me.DeleteAttachmentOperationCompleted Is Nothing) Then
                Me.DeleteAttachmentOperationCompleted = AddressOf Me.OnDeleteAttachmentOperationCompleted
            End If
            Me.InvokeAsync("DeleteAttachment", New Object() {listName, listItemID, url}, Me.DeleteAttachmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteAttachmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteAttachmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteAttachmentCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/CheckOutFile", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckOutFile(ByVal pageUrl As String, ByVal checkoutToLocal As String, ByVal lastmodified As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckOutFile", New Object() {pageUrl, checkoutToLocal, lastmodified})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckOutFileAsync(ByVal pageUrl As String, ByVal checkoutToLocal As String, ByVal lastmodified As String)
            Me.CheckOutFileAsync(pageUrl, checkoutToLocal, lastmodified, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckOutFileAsync(ByVal pageUrl As String, ByVal checkoutToLocal As String, ByVal lastmodified As String, ByVal userState As Object)
            If (Me.CheckOutFileOperationCompleted Is Nothing) Then
                Me.CheckOutFileOperationCompleted = AddressOf Me.OnCheckOutFileOperationCompleted
            End If
            Me.InvokeAsync("CheckOutFile", New Object() {pageUrl, checkoutToLocal, lastmodified}, Me.CheckOutFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckOutFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckOutFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckOutFileCompleted(Me, New CheckOutFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/UndoCheckOut", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UndoCheckOut(ByVal pageUrl As String) As Boolean
            Dim results() As Object = Me.Invoke("UndoCheckOut", New Object() {pageUrl})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UndoCheckOutAsync(ByVal pageUrl As String)
            Me.UndoCheckOutAsync(pageUrl, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UndoCheckOutAsync(ByVal pageUrl As String, ByVal userState As Object)
            If (Me.UndoCheckOutOperationCompleted Is Nothing) Then
                Me.UndoCheckOutOperationCompleted = AddressOf Me.OnUndoCheckOutOperationCompleted
            End If
            Me.InvokeAsync("UndoCheckOut", New Object() {pageUrl}, Me.UndoCheckOutOperationCompleted, userState)
        End Sub
        
        Private Sub OnUndoCheckOutOperationCompleted(ByVal arg As Object)
            If (Not (Me.UndoCheckOutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UndoCheckOutCompleted(Me, New UndoCheckOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/CheckInFile", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckInFile(ByVal pageUrl As String, ByVal comment As String, ByVal CheckinType As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckInFile", New Object() {pageUrl, comment, CheckinType})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckInFileAsync(ByVal pageUrl As String, ByVal comment As String, ByVal CheckinType As String)
            Me.CheckInFileAsync(pageUrl, comment, CheckinType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckInFileAsync(ByVal pageUrl As String, ByVal comment As String, ByVal CheckinType As String, ByVal userState As Object)
            If (Me.CheckInFileOperationCompleted Is Nothing) Then
                Me.CheckInFileOperationCompleted = AddressOf Me.OnCheckInFileOperationCompleted
            End If
            Me.InvokeAsync("CheckInFile", New Object() {pageUrl, comment, CheckinType}, Me.CheckInFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckInFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckInFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckInFileCompleted(Me, New CheckInFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/GetListContentTypes", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListContentTypes(ByVal listName As String, ByVal contentTypeId As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetListContentTypes", New Object() {listName, contentTypeId})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListContentTypesAsync(ByVal listName As String, ByVal contentTypeId As String)
            Me.GetListContentTypesAsync(listName, contentTypeId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListContentTypesAsync(ByVal listName As String, ByVal contentTypeId As String, ByVal userState As Object)
            If (Me.GetListContentTypesOperationCompleted Is Nothing) Then
                Me.GetListContentTypesOperationCompleted = AddressOf Me.OnGetListContentTypesOperationCompleted
            End If
            Me.InvokeAsync("GetListContentTypes", New Object() {listName, contentTypeId}, Me.GetListContentTypesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListContentTypesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListContentTypesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListContentTypesCompleted(Me, New GetListContentTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/GetListContentType", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListContentType(ByVal listName As String, ByVal contentTypeId As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetListContentType", New Object() {listName, contentTypeId})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListContentTypeAsync(ByVal listName As String, ByVal contentTypeId As String)
            Me.GetListContentTypeAsync(listName, contentTypeId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListContentTypeAsync(ByVal listName As String, ByVal contentTypeId As String, ByVal userState As Object)
            If (Me.GetListContentTypeOperationCompleted Is Nothing) Then
                Me.GetListContentTypeOperationCompleted = AddressOf Me.OnGetListContentTypeOperationCompleted
            End If
            Me.InvokeAsync("GetListContentType", New Object() {listName, contentTypeId}, Me.GetListContentTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListContentTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListContentTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListContentTypeCompleted(Me, New GetListContentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/CreateContentType", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateContentType(ByVal listName As String, ByVal displayName As String, ByVal parentType As String, ByVal fields As System.Xml.XmlNode, ByVal contentTypeProperties As System.Xml.XmlNode, ByVal addToView As String) As String
            Dim results() As Object = Me.Invoke("CreateContentType", New Object() {listName, displayName, parentType, fields, contentTypeProperties, addToView})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateContentTypeAsync(ByVal listName As String, ByVal displayName As String, ByVal parentType As String, ByVal fields As System.Xml.XmlNode, ByVal contentTypeProperties As System.Xml.XmlNode, ByVal addToView As String)
            Me.CreateContentTypeAsync(listName, displayName, parentType, fields, contentTypeProperties, addToView, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateContentTypeAsync(ByVal listName As String, ByVal displayName As String, ByVal parentType As String, ByVal fields As System.Xml.XmlNode, ByVal contentTypeProperties As System.Xml.XmlNode, ByVal addToView As String, ByVal userState As Object)
            If (Me.CreateContentTypeOperationCompleted Is Nothing) Then
                Me.CreateContentTypeOperationCompleted = AddressOf Me.OnCreateContentTypeOperationCompleted
            End If
            Me.InvokeAsync("CreateContentType", New Object() {listName, displayName, parentType, fields, contentTypeProperties, addToView}, Me.CreateContentTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateContentTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateContentTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateContentTypeCompleted(Me, New CreateContentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/UpdateContentType", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateContentType(ByVal listName As String, ByVal contentTypeId As String, ByVal contentTypeProperties As System.Xml.XmlNode, ByVal newFields As System.Xml.XmlNode, ByVal updateFields As System.Xml.XmlNode, ByVal deleteFields As System.Xml.XmlNode, ByVal addToView As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateContentType", New Object() {listName, contentTypeId, contentTypeProperties, newFields, updateFields, deleteFields, addToView})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateContentTypeAsync(ByVal listName As String, ByVal contentTypeId As String, ByVal contentTypeProperties As System.Xml.XmlNode, ByVal newFields As System.Xml.XmlNode, ByVal updateFields As System.Xml.XmlNode, ByVal deleteFields As System.Xml.XmlNode, ByVal addToView As String)
            Me.UpdateContentTypeAsync(listName, contentTypeId, contentTypeProperties, newFields, updateFields, deleteFields, addToView, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateContentTypeAsync(ByVal listName As String, ByVal contentTypeId As String, ByVal contentTypeProperties As System.Xml.XmlNode, ByVal newFields As System.Xml.XmlNode, ByVal updateFields As System.Xml.XmlNode, ByVal deleteFields As System.Xml.XmlNode, ByVal addToView As String, ByVal userState As Object)
            If (Me.UpdateContentTypeOperationCompleted Is Nothing) Then
                Me.UpdateContentTypeOperationCompleted = AddressOf Me.OnUpdateContentTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateContentType", New Object() {listName, contentTypeId, contentTypeProperties, newFields, updateFields, deleteFields, addToView}, Me.UpdateContentTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateContentTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateContentTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateContentTypeCompleted(Me, New UpdateContentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/DeleteContentType", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteContentType(ByVal listName As String, ByVal contentTypeId As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DeleteContentType", New Object() {listName, contentTypeId})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteContentTypeAsync(ByVal listName As String, ByVal contentTypeId As String)
            Me.DeleteContentTypeAsync(listName, contentTypeId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteContentTypeAsync(ByVal listName As String, ByVal contentTypeId As String, ByVal userState As Object)
            If (Me.DeleteContentTypeOperationCompleted Is Nothing) Then
                Me.DeleteContentTypeOperationCompleted = AddressOf Me.OnDeleteContentTypeOperationCompleted
            End If
            Me.InvokeAsync("DeleteContentType", New Object() {listName, contentTypeId}, Me.DeleteContentTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteContentTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteContentTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteContentTypeCompleted(Me, New DeleteContentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/UpdateContentTypeXmlDocument", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateContentTypeXmlDocument(ByVal listName As String, ByVal contentTypeId As String, ByVal newDocument As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateContentTypeXmlDocument", New Object() {listName, contentTypeId, newDocument})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateContentTypeXmlDocumentAsync(ByVal listName As String, ByVal contentTypeId As String, ByVal newDocument As System.Xml.XmlNode)
            Me.UpdateContentTypeXmlDocumentAsync(listName, contentTypeId, newDocument, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateContentTypeXmlDocumentAsync(ByVal listName As String, ByVal contentTypeId As String, ByVal newDocument As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.UpdateContentTypeXmlDocumentOperationCompleted Is Nothing) Then
                Me.UpdateContentTypeXmlDocumentOperationCompleted = AddressOf Me.OnUpdateContentTypeXmlDocumentOperationCompleted
            End If
            Me.InvokeAsync("UpdateContentTypeXmlDocument", New Object() {listName, contentTypeId, newDocument}, Me.UpdateContentTypeXmlDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateContentTypeXmlDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateContentTypeXmlDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateContentTypeXmlDocumentCompleted(Me, New UpdateContentTypeXmlDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/UpdateContentTypesXmlDocument", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateContentTypesXmlDocument(ByVal listName As String, ByVal newDocument As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateContentTypesXmlDocument", New Object() {listName, newDocument})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateContentTypesXmlDocumentAsync(ByVal listName As String, ByVal newDocument As System.Xml.XmlNode)
            Me.UpdateContentTypesXmlDocumentAsync(listName, newDocument, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateContentTypesXmlDocumentAsync(ByVal listName As String, ByVal newDocument As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.UpdateContentTypesXmlDocumentOperationCompleted Is Nothing) Then
                Me.UpdateContentTypesXmlDocumentOperationCompleted = AddressOf Me.OnUpdateContentTypesXmlDocumentOperationCompleted
            End If
            Me.InvokeAsync("UpdateContentTypesXmlDocument", New Object() {listName, newDocument}, Me.UpdateContentTypesXmlDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateContentTypesXmlDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateContentTypesXmlDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateContentTypesXmlDocumentCompleted(Me, New UpdateContentTypesXmlDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/DeleteContentTypeXmlDocument", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteContentTypeXmlDocument(ByVal listName As String, ByVal contentTypeId As String, ByVal documentUri As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DeleteContentTypeXmlDocument", New Object() {listName, contentTypeId, documentUri})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteContentTypeXmlDocumentAsync(ByVal listName As String, ByVal contentTypeId As String, ByVal documentUri As String)
            Me.DeleteContentTypeXmlDocumentAsync(listName, contentTypeId, documentUri, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteContentTypeXmlDocumentAsync(ByVal listName As String, ByVal contentTypeId As String, ByVal documentUri As String, ByVal userState As Object)
            If (Me.DeleteContentTypeXmlDocumentOperationCompleted Is Nothing) Then
                Me.DeleteContentTypeXmlDocumentOperationCompleted = AddressOf Me.OnDeleteContentTypeXmlDocumentOperationCompleted
            End If
            Me.InvokeAsync("DeleteContentTypeXmlDocument", New Object() {listName, contentTypeId, documentUri}, Me.DeleteContentTypeXmlDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteContentTypeXmlDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteContentTypeXmlDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteContentTypeXmlDocumentCompleted(Me, New DeleteContentTypeXmlDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/ApplyContentTypeToList", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ApplyContentTypeToList(ByVal webUrl As String, ByVal contentTypeId As String, ByVal listName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ApplyContentTypeToList", New Object() {webUrl, contentTypeId, listName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ApplyContentTypeToListAsync(ByVal webUrl As String, ByVal contentTypeId As String, ByVal listName As String)
            Me.ApplyContentTypeToListAsync(webUrl, contentTypeId, listName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ApplyContentTypeToListAsync(ByVal webUrl As String, ByVal contentTypeId As String, ByVal listName As String, ByVal userState As Object)
            If (Me.ApplyContentTypeToListOperationCompleted Is Nothing) Then
                Me.ApplyContentTypeToListOperationCompleted = AddressOf Me.OnApplyContentTypeToListOperationCompleted
            End If
            Me.InvokeAsync("ApplyContentTypeToList", New Object() {webUrl, contentTypeId, listName}, Me.ApplyContentTypeToListOperationCompleted, userState)
        End Sub
        
        Private Sub OnApplyContentTypeToListOperationCompleted(ByVal arg As Object)
            If (Not (Me.ApplyContentTypeToListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ApplyContentTypeToListCompleted(Me, New ApplyContentTypeToListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetListCompletedEventHandler(ByVal sender As Object, ByVal e As GetListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetListAndViewCompletedEventHandler(ByVal sender As Object, ByVal e As GetListAndViewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListAndViewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub DeleteListCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub AddListCompletedEventHandler(ByVal sender As Object, ByVal e As AddListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub AddListFromFeatureCompletedEventHandler(ByVal sender As Object, ByVal e As AddListFromFeatureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddListFromFeatureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub UpdateListCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetListCollectionCompletedEventHandler(ByVal sender As Object, ByVal e As GetListCollectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListCollectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetListItemsCompletedEventHandler(ByVal sender As Object, ByVal e As GetListItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetListItemChangesCompletedEventHandler(ByVal sender As Object, ByVal e As GetListItemChangesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListItemChangesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetListItemChangesSinceTokenCompletedEventHandler(ByVal sender As Object, ByVal e As GetListItemChangesSinceTokenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListItemChangesSinceTokenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub UpdateListItemsCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateListItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateListItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub AddDiscussionBoardItemCompletedEventHandler(ByVal sender As Object, ByVal e As AddDiscussionBoardItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddDiscussionBoardItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetVersionCollectionCompletedEventHandler(ByVal sender As Object, ByVal e As GetVersionCollectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetVersionCollectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub AddAttachmentCompletedEventHandler(ByVal sender As Object, ByVal e As AddAttachmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddAttachmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetAttachmentCollectionCompletedEventHandler(ByVal sender As Object, ByVal e As GetAttachmentCollectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAttachmentCollectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub DeleteAttachmentCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub CheckOutFileCompletedEventHandler(ByVal sender As Object, ByVal e As CheckOutFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckOutFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub UndoCheckOutCompletedEventHandler(ByVal sender As Object, ByVal e As UndoCheckOutCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UndoCheckOutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub CheckInFileCompletedEventHandler(ByVal sender As Object, ByVal e As CheckInFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckInFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetListContentTypesCompletedEventHandler(ByVal sender As Object, ByVal e As GetListContentTypesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListContentTypesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetListContentTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetListContentTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListContentTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub CreateContentTypeCompletedEventHandler(ByVal sender As Object, ByVal e As CreateContentTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateContentTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub UpdateContentTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateContentTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateContentTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub DeleteContentTypeCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteContentTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteContentTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub UpdateContentTypeXmlDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateContentTypeXmlDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateContentTypeXmlDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub UpdateContentTypesXmlDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateContentTypesXmlDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateContentTypesXmlDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub DeleteContentTypeXmlDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteContentTypeXmlDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteContentTypeXmlDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub ApplyContentTypeToListCompletedEventHandler(ByVal sender As Object, ByVal e As ApplyContentTypeToListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ApplyContentTypeToListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
End Namespace
